package com.example.setiatmobile;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import org.json.JSONObject;

import android.app.IntentService;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.BatteryManager;
import android.preference.PreferenceManager;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.widget.Toast;


public class BackgroundWork extends IntentService {

	public BackgroundWork()
	{
		super("BackgroundWork");
	}
	@Override
	protected void onHandleIntent(Intent intent) {
		// TODO Auto-generated method stub
		//PowerManager mgr = (PowerManager)getSystemService(Context.POWER_SERVICE);
		//WakeLock wakeLock = mgr.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "MyWakeLock");
		//wakeLock.acquire();
		NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this)
		.setSmallIcon(R.drawable.ic_launcher)
		.setContentTitle("App Running")
		.setContentText("App Running")
		.setOngoing(true);
		
		
		
		NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
		
		SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
		String batteryPercent = sharedPref.getString("pref_batteryCharge","50");
		boolean wifiOnly = sharedPref.getBoolean("pref_wifionly", true);
		boolean enabled = sharedPref.getBoolean("pref_enabled", true);
		boolean chargeOnly = sharedPref.getBoolean("pref_chargeonly", false);
	

		
		
		IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
		Intent batteryStatus= registerReceiver(null, ifilter);
		int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS,-1);
		boolean isCharging = status==BatteryManager.BATTERY_STATUS_CHARGING ||
								status==BatteryManager.BATTERY_STATUS_FULL;
		int level =batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL,-1);
		int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE,-1);
		float pct = level/ (float)scale;
		
		ConnectivityManager cm = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
		boolean isWifi = activeNetwork.getType()== ConnectivityManager.TYPE_WIFI;
		
		BufferedReader input=null;
		PrintWriter output=null;
		Socket sock = null;
		if(enabled && 
				(!wifiOnly|| isWifi) && 
				(!chargeOnly || isCharging))
		{

			mNotificationManager.notify(0,mBuilder.build());
			
			//Do Work Here------------------------
			try
			{
				sock = new Socket("172.20.69.78",13267);
				input = new BufferedReader(new InputStreamReader(sock.getInputStream()));
				output = new PrintWriter(sock.getOutputStream(),true);
				
				String url = input.readLine();
				
				Processor imageProcessor = new Processor("target");
				output.println("Begin");
				JSONObject jObject = new JSONObject();
				jObject.put("target", url);
			
				imageProcessor.processImage(jObject); // Will not work, needs to be passed a JSONObject containing relevant data.
				Toast.makeText(this, url, Toast.LENGTH_SHORT).show();
			//	Iterator<?> keys = returnObject.keys();
				//output.println("Start");
			//	while(keys.hasNext())
				//{
				//	String key= (String)keys.next();
				//	String value =  returnObject.getString(key);
				//	Toast.makeText(this, key+":"+value, Toast.LENGTH_LONG).show();
				//	output.println(key+":"+value);
				//}
				
				output.println("Done");
			}
			catch(IOException e)
			{
				//Log.e("Exception", e.getMessage());
			}
			catch(Exception e)
			{
				Log.e("Exception", e.getMessage());
			}
			
			
			//------------------------------------
			
    		//Run the intent again after the previous task finished
    		startService(intent);
		}
		else
		{
			mNotificationManager.cancel(0);
		}
		//wakeLock.release();

		

	}

}
